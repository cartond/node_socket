{"version":3,"file":"user.spec.js","sourceRoot":"","sources":["../../test/user.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/* eslint-disable no-invalid-this */\nimport { CloudEventsDispatcher } from \"../src/cloudEventsDispatcher\";\nimport { assert } from \"chai\";\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { Socket } from \"net\";\nimport * as sinon from \"sinon\";\n\nfunction buildRequest(\n  req: IncomingMessage,\n  hub: string,\n  connectionId: string,\n  userId?: string\n): void {\n  req.headers[\"webhook-request-origin\"] = \"xxx.webpubsub.azure.com\";\n  req.headers[\"Content-Type\"] = \"application/json; charset=utf-8\";\n  req.headers[\"ce-awpsversion\"] = \"1.0\";\n  req.headers[\"ce-specversion\"] = \"1.0\";\n  req.headers[\"ce-type\"] = \"azure.webpubsub.user.connect\";\n  req.headers[\"ce-source\"] = `/hubs/${hub}/client/${connectionId}`;\n  req.headers[\"ce-id\"] = \"1\";\n  req.headers[\"ce-time\"] = new Date().toUTCString();\n  if (userId !== undefined) {\n    req.headers[\"ce-userId\"] = userId;\n  }\n  req.headers[\"ce-connectionId\"] = connectionId;\n  req.headers[\"ce-hub\"] = hub;\n  req.headers[\"ce-event\"] = \"connect\";\n}\n\nfunction mockBody(req: IncomingMessage, body: string): void {\n  req.emit(\"data\", Buffer.from(body, \"utf-8\"));\n  req.emit(\"end\");\n}\n\ndescribe(\"Can handle user event\", function() {\n  let req: IncomingMessage;\n  let res: ServerResponse;\n\n  beforeEach(function() {\n    req = new IncomingMessage(new Socket());\n    res = new ServerResponse(req);\n  });\n\n  it(\"Should not handle the request if request is not cloud events\", async function() {\n    const endSpy = sinon.spy(res.end);\n\n    const dispatcher = new CloudEventsDispatcher(\"hub1\");\n    const result = await dispatcher.handleRequest(req, res);\n    assert.isFalse(result);\n    assert.isTrue(endSpy.notCalled);\n  });\n\n  it(\"Should not handle the request if hub does not match\", async function() {\n    const endSpy = sinon.spy(res.end);\n    buildRequest(req, \"hub\", \"conn1\");\n\n    const dispatcher = new CloudEventsDispatcher(\"hub1\");\n    const result = await dispatcher.handleRequest(req, res);\n    assert.isFalse(result);\n    assert.isTrue(endSpy.notCalled);\n  });\n\n  it(\"Should response with 200 when option is not specified\", async function() {\n    const endSpy = sinon.spy(res, \"end\");\n    buildRequest(req, \"hub\", \"conn1\");\n\n    const dispatcher = new CloudEventsDispatcher(\"hub\");\n    const result = await dispatcher.handleRequest(req, res);\n    assert.isTrue(result, \"should handle\");\n    assert.isTrue(endSpy.calledOnce, \"should call once\");\n    assert.equal(200, res.statusCode, \"should be 200\");\n  });\n\n  it(\"Should response with 200 when handler is not specified\", async function() {\n    const endSpy = sinon.spy(res, \"end\");\n    buildRequest(req, \"hub\", \"conn1\");\n\n    const dispatcher = new CloudEventsDispatcher(\"hub\", {});\n    const result = await dispatcher.handleRequest(req, res);\n    assert.isTrue(result, \"should handle\");\n    assert.isTrue(endSpy.calledOnce, \"should call once\");\n    assert.equal(200, res.statusCode, \"should be 200\");\n  });\n\n  it(\"Should response with error when handler returns error\", async function() {\n    const endSpy = sinon.spy(res, \"end\");\n    buildRequest(req, \"hub\", \"conn1\");\n\n    const dispatcher = new CloudEventsDispatcher(\"hub\", {\n      handleUserEvent: async (_, response) => {\n        response.fail(500);\n      }\n    });\n    const process = dispatcher.handleRequest(req, res);\n    mockBody(req, JSON.stringify({}));\n    const result = await process;\n    assert.isTrue(result, \"should handle\");\n    assert.isTrue(endSpy.calledOnce, \"should call once\");\n    assert.equal(500, res.statusCode, \"should be error\");\n  });\n\n  it(\"Should response with success when handler returns success\", async function() {\n    const endSpy = sinon.spy(res, \"end\");\n    buildRequest(req, \"hub\", \"conn1\");\n\n    const dispatcher = new CloudEventsDispatcher(\"hub\", {\n      handleUserEvent: async (_, response) => {\n        response.success();\n      }\n    });\n    const process = dispatcher.handleRequest(req, res);\n    mockBody(req, JSON.stringify({}));\n    const result = await process;\n    assert.isTrue(result, \"should handle\");\n    assert.isTrue(endSpy.calledOnce, \"should call once\");\n    assert.equal(200, res.statusCode, \"should be success\");\n  });\n\n  it(\"Should response with success when returns success binary\", async function() {\n    const endSpy = sinon.spy(res, \"end\");\n    buildRequest(req, \"hub\", \"conn1\");\n\n    const dispatcher = new CloudEventsDispatcher(\"hub\", {\n      handleUserEvent: async (_, response) => {\n        response.success(\"a\");\n      }\n    });\n    const process = dispatcher.handleRequest(req, res);\n    mockBody(req, JSON.stringify({}));\n    const result = await process;\n    assert.isTrue(result, \"should handle\");\n    assert.isTrue(endSpy.calledOnce, \"should call once\");\n    assert.equal(200, res.statusCode, \"should be success\");\n    assert.equal(\"application/octet-stream\", res.getHeader(\"content-type\"), \"should be binary\");\n  });\n\n  it(\"Should response with success when returns success text\", async function() {\n    const endSpy = sinon.spy(res, \"end\");\n    buildRequest(req, \"hub\", \"conn1\");\n\n    const dispatcher = new CloudEventsDispatcher(\"hub\", {\n      handleUserEvent: async (_, response) => {\n        response.success(\"a\", \"text\");\n      }\n    });\n    const process = dispatcher.handleRequest(req, res);\n    mockBody(req, JSON.stringify({}));\n    const result = await process;\n    assert.isTrue(result, \"should handle\");\n    assert.isTrue(endSpy.calledOnce, \"should call once\");\n    assert.equal(200, res.statusCode, \"should be success\");\n    assert.equal(\"text/plain; charset=utf-8\", res.getHeader(\"content-type\"), \"should be text\");\n  });\n\n  it(\"Should response with success when returns success json\", async function() {\n    const endSpy = sinon.spy(res, \"end\");\n    buildRequest(req, \"hub\", \"conn1\");\n\n    const dispatcher = new CloudEventsDispatcher(\"hub\", {\n      handleUserEvent: async (_, response) => {\n        response.success(\"a\", \"json\");\n      }\n    });\n    const process = dispatcher.handleRequest(req, res);\n    mockBody(req, JSON.stringify({}));\n    const result = await process;\n    assert.isTrue(result, \"should handle\");\n    assert.isTrue(endSpy.calledOnce, \"should call once\");\n    assert.equal(200, res.statusCode, \"should be success\");\n    assert.equal(\n      \"application/json; charset=utf-8\",\n      res.getHeader(\"content-type\"),\n      \"should be json\"\n    );\n  });\n\n  it(\"Should be able to set connection state\", async function() {\n    const endSpy = sinon.spy(res, \"end\");\n    buildRequest(req, \"hub\", \"conn1\");\n\n    const dispatcher = new CloudEventsDispatcher(\"hub\", {\n      handleUserEvent: async (_, response) => {\n        response.setState(\"key1\", \"val1\");\n        response.setState(\"key2\", \"val2\");\n        response.setState(\"key1\", \"val3\");\n        response.setState(\"key3\", \"\");\n        response.success();\n      }\n    });\n    const process = dispatcher.handleRequest(req, res);\n    mockBody(req, JSON.stringify({}));\n    const result = await process;\n    assert.isTrue(result, \"should handle\");\n    assert.isTrue(endSpy.calledOnce, \"should call once\");\n    assert.equal(200, res.statusCode, \"should be success\");\n\n    assert.equal(\n      Buffer.from(\n        JSON.stringify({\n          key1: \"val3\",\n          key2: \"val2\",\n          key3: \"\"\n        })\n      ).toString(\"base64\"),\n      res.getHeader(\"ce-connectionState\"),\n      \"should contain multiple state headers\"\n    );\n  });\n});\n"]}